class While {
  
  /**
   * Tests whether while loop contained in if branch is being handled correctly.
   * If branch is kind of special case here because at the end of each branch
   * there is an instruction being added that stores result of if branch.
   * 
   * Previously, there was a bug in handling while loops (that are represented
   * using LabelDefs and jumps) because after NormalizeForJribble phase
   * LabelDef would get translated into LabelDef followed by unit literal.
   * That would break things only if such pair was followed by another statement
   * generated by that phase as in if case.
   */
  def a(): Int = {
    var x = 0
    if (x < 0) {
      while (x < 0) {
        println("inside while")
      }
      0
    } else 1
  }
  
  /**
   * Tests whether simplest example of while loop is being translated
   * correctly to jribble.
   */
  def b(x: Int): Unit = {
    while (x < 0) {
      println("inside while")
    }
  }
  
}
